{
  "version": 3,
  "sources": ["../../../../../node_modules/@material/web/divider/internal/divider.ts", "../../../../../node_modules/@material/web/divider/internal/divider-styles.ts", "../../../../../node_modules/@material/web/divider/divider.ts", "../../../../../node_modules/@material/web/labs/behaviors/focusable.ts", "../../../../../node_modules/@material/web/tabs/internal/tab.ts", "../../../../../node_modules/@material/web/tabs/internal/tabs.ts", "../../../../../node_modules/@material/web/tabs/internal/tabs-styles.ts", "../../../../../node_modules/@material/web/tabs/tabs.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {LitElement} from 'lit';\nimport {property} from 'lit/decorators.js';\n\n/**\n * A divider component.\n */\nexport class Divider extends LitElement {\n  /**\n   * Indents the divider with equal padding on both sides.\n   */\n  @property({type: Boolean, reflect: true}) inset = false;\n\n  /**\n   * Indents the divider with padding on the leading side.\n   */\n  @property({type: Boolean, reflect: true, attribute: 'inset-start'})\n  insetStart = false;\n\n  /**\n   * Indents the divider with padding on the trailing side.\n   */\n  @property({type: Boolean, reflect: true, attribute: 'inset-end'})\n  insetEnd = false;\n}\n", "/**\n * @license\n * Copyright 2024 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n// Generated stylesheet for ./divider/internal/divider-styles.css.\nimport {css} from 'lit';\nexport const styles = css`:host{box-sizing:border-box;color:var(--md-divider-color, var(--md-sys-color-outline-variant, #cac4d0));display:flex;height:var(--md-divider-thickness, 1px);width:100%}:host([inset]),:host([inset-start]){padding-inline-start:16px}:host([inset]),:host([inset-end]){padding-inline-end:16px}:host::before{background:currentColor;content:\"\";height:100%;width:100%}@media(forced-colors: active){:host::before{background:CanvasText}}\n`;\n", "/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {CSSResultOrNative} from 'lit';\nimport {customElement} from 'lit/decorators.js';\n\nimport {Divider} from './internal/divider.js';\nimport {styles} from './internal/divider-styles.js';\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'md-divider': MdDivider;\n  }\n}\n\n/**\n * @summary A divider is a thin line that groups content in lists and\n * containers.\n *\n * @description Dividers can reinforce tapability, such as when used to separate\n * list items or define tappable regions in an accordion.\n *\n * @final\n * @suppress {visibility}\n */\n@customElement('md-divider')\nexport class MdDivider extends Divider {\n  static override styles: CSSResultOrNative[] = [styles];\n}\n", "/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {LitElement} from 'lit';\nimport {property} from 'lit/decorators.js';\n\nimport {MixinBase, MixinReturn} from './mixin.js';\n\n/**\n * An element that can enable and disable `tabindex` focusability.\n */\nexport interface Focusable {\n  /**\n   * Whether or not the element can be focused. Defaults to true. Set to false\n   * to disable focusing (unless a user has set a `tabindex`).\n   */\n  [isFocusable]: boolean;\n}\n\n/**\n * A property symbol that indicates whether or not a `Focusable` element can be\n * focused.\n */\nexport const isFocusable = Symbol('isFocusable');\n\nconst privateIsFocusable = Symbol('privateIsFocusable');\nconst externalTabIndex = Symbol('externalTabIndex');\nconst isUpdatingTabIndex = Symbol('isUpdatingTabIndex');\nconst updateTabIndex = Symbol('updateTabIndex');\n\n/**\n * Mixes in focusable functionality for a class.\n *\n * Elements can enable and disable their focusability with the `isFocusable`\n * symbol property. Changing `tabIndex` will trigger a lit render, meaning\n * `this.tabIndex` can be used in template expressions.\n *\n * This mixin will preserve externally-set tabindices. If an element turns off\n * focusability, but a user sets `tabindex=\"0\"`, it will still be focusable.\n *\n * To remove user overrides and restore focusability control to the element,\n * remove the `tabindex` attribute.\n *\n * @param base The class to mix functionality into.\n * @return The provided class with `Focusable` mixed in.\n */\nexport function mixinFocusable<T extends MixinBase<LitElement>>(\n  base: T,\n): MixinReturn<T, Focusable> {\n  abstract class FocusableElement extends base implements Focusable {\n    @property({noAccessor: true})\n    declare tabIndex: number;\n\n    get [isFocusable]() {\n      return this[privateIsFocusable];\n    }\n\n    set [isFocusable](value: boolean) {\n      if (this[isFocusable] === value) {\n        return;\n      }\n\n      this[privateIsFocusable] = value;\n      this[updateTabIndex]();\n    }\n\n    [privateIsFocusable] = true;\n    [externalTabIndex]: number | null = null;\n    [isUpdatingTabIndex] = false;\n\n    override connectedCallback() {\n      super.connectedCallback();\n      this[updateTabIndex]();\n    }\n\n    override attributeChangedCallback(\n      name: string,\n      old: string | null,\n      value: string | null,\n    ) {\n      if (name !== 'tabindex') {\n        super.attributeChangedCallback(name, old, value);\n        return;\n      }\n\n      this.requestUpdate('tabIndex', Number(old ?? -1));\n      if (this[isUpdatingTabIndex]) {\n        // Not an externally-initiated update.\n        return;\n      }\n\n      if (!this.hasAttribute('tabindex')) {\n        // User removed the attribute, can now use internal tabIndex\n        this[externalTabIndex] = null;\n        this[updateTabIndex]();\n        return;\n      }\n\n      this[externalTabIndex] = this.tabIndex;\n    }\n\n    [updateTabIndex]() {\n      const internalTabIndex = this[isFocusable] ? 0 : -1;\n      const computedTabIndex = this[externalTabIndex] ?? internalTabIndex;\n\n      this[isUpdatingTabIndex] = true;\n      this.tabIndex = computedTabIndex;\n      this[isUpdatingTabIndex] = false;\n    }\n  }\n\n  return FocusableElement;\n}\n", "/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport '../../elevation/elevation.js';\nimport '../../focus/md-focus-ring.js';\nimport '../../ripple/ripple.js';\n\nimport {html, isServer, LitElement, nothing} from 'lit';\nimport {\n  property,\n  query,\n  queryAssignedElements,\n  queryAssignedNodes,\n  state,\n} from 'lit/decorators.js';\nimport {ClassInfo, classMap} from 'lit/directives/class-map.js';\n\nimport {EASING} from '../../internal/motion/animation.js';\nimport {mixinFocusable} from '../../labs/behaviors/focusable.js';\n\n/**\n * Symbol for tabs to use to animate their indicators based off another tab's\n * indicator.\n */\nconst INDICATOR = Symbol('indicator');\n\n/**\n * Symbol used by the tab bar to request a tab to animate its indicator from a\n * previously selected tab.\n */\nexport const ANIMATE_INDICATOR = Symbol('animateIndicator');\n\n// Separate variable needed for closure.\nconst tabBaseClass = mixinFocusable(LitElement);\n\n/**\n * Tab component.\n */\nexport class Tab extends tabBaseClass {\n  /**\n   * The attribute `md-tab` indicates that the element is a tab for the parent\n   * element, `<md-tabs>`. Make sure if you're implementing your own `md-tab`\n   * component that you have an `md-tab` attribute set.\n   */\n  @property({type: Boolean, reflect: true, attribute: 'md-tab'})\n  readonly isTab = true;\n\n  /**\n   * Whether or not the tab is selected.\n   **/\n  @property({type: Boolean, reflect: true}) active = false;\n\n  /**\n   * @deprecated use `active`\n   */\n  @property({type: Boolean})\n  get selected() {\n    return this.active;\n  }\n  set selected(active: boolean) {\n    this.active = active;\n  }\n\n  /**\n   * In SSR, set this to true when an icon is present.\n   */\n  @property({type: Boolean, attribute: 'has-icon'}) hasIcon = false;\n\n  /**\n   * In SSR, set this to true when there is no label and only an icon.\n   */\n  @property({type: Boolean, attribute: 'icon-only'}) iconOnly = false;\n\n  @query('.indicator') readonly [INDICATOR]!: HTMLElement | null;\n  @state() protected fullWidthIndicator = false;\n  @queryAssignedNodes({flatten: true})\n  private readonly assignedDefaultNodes!: Node[];\n  @queryAssignedElements({slot: 'icon', flatten: true})\n  private readonly assignedIcons!: HTMLElement[];\n  private readonly internals =\n    // Cast needed for closure\n    (this as HTMLElement).attachInternals();\n\n  constructor() {\n    super();\n    if (!isServer) {\n      this.internals.role = 'tab';\n      this.addEventListener('keydown', this.handleKeydown.bind(this));\n    }\n  }\n\n  protected override render() {\n    const indicator = html`<div class=\"indicator\"></div>`;\n    return html`<div\n      class=\"button\"\n      role=\"presentation\"\n      @click=${this.handleContentClick}>\n      <md-focus-ring part=\"focus-ring\" inward .control=${this}></md-focus-ring>\n      <md-elevation part=\"elevation\"></md-elevation>\n      <md-ripple .control=${this}></md-ripple>\n      <div\n        class=\"content ${classMap(this.getContentClasses())}\"\n        role=\"presentation\">\n        <slot name=\"icon\" @slotchange=${this.handleIconSlotChange}></slot>\n        <slot @slotchange=${this.handleSlotChange}></slot>\n        ${this.fullWidthIndicator ? nothing : indicator}\n      </div>\n      ${this.fullWidthIndicator ? indicator : nothing}\n    </div>`;\n  }\n\n  protected getContentClasses(): ClassInfo {\n    return {\n      'has-icon': this.hasIcon,\n      'has-label': !this.iconOnly,\n    };\n  }\n\n  protected override updated() {\n    this.internals.ariaSelected = String(this.active);\n  }\n\n  private async handleKeydown(event: KeyboardEvent) {\n    // Allow event to bubble.\n    await 0;\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    if (event.key === 'Enter' || event.key === ' ') {\n      // Prevent default behavior such as scrolling when pressing spacebar.\n      event.preventDefault();\n      this.click();\n    }\n  }\n\n  private handleContentClick(event: Event) {\n    // Ensure the \"click\" target is always the tab, and not content, by stopping\n    // propagation of content clicks and re-clicking the host.\n    event.stopPropagation();\n    this.click();\n  }\n\n  [ANIMATE_INDICATOR](previousTab: Tab) {\n    if (!this[INDICATOR]) {\n      return;\n    }\n\n    this[INDICATOR].getAnimations().forEach((a) => {\n      a.cancel();\n    });\n    const frames = this.getKeyframes(previousTab);\n    if (frames !== null) {\n      this[INDICATOR].animate(frames, {\n        duration: 250,\n        easing: EASING.EMPHASIZED,\n      });\n    }\n  }\n\n  private getKeyframes(previousTab: Tab) {\n    const reduceMotion = shouldReduceMotion();\n    if (!this.active) {\n      return reduceMotion ? [{'opacity': 1}, {'transform': 'none'}] : null;\n    }\n\n    const from: Keyframe = {};\n    const fromRect =\n      previousTab[INDICATOR]?.getBoundingClientRect() ?? ({} as DOMRect);\n    const fromPos = fromRect.left;\n    const fromExtent = fromRect.width;\n    const toRect = this[INDICATOR]!.getBoundingClientRect();\n    const toPos = toRect.left;\n    const toExtent = toRect.width;\n    const scale = fromExtent / toExtent;\n    if (\n      !reduceMotion &&\n      fromPos !== undefined &&\n      toPos !== undefined &&\n      !isNaN(scale)\n    ) {\n      from['transform'] = `translateX(${(fromPos - toPos).toFixed(\n        4,\n      )}px) scaleX(${scale.toFixed(4)})`;\n    } else {\n      from['opacity'] = 0;\n    }\n    // note, including `transform: none` avoids quirky Safari behavior\n    // that can hide the animation.\n    return [from, {'transform': 'none'}];\n  }\n\n  private handleSlotChange() {\n    this.iconOnly = false;\n    // Check if there's any label text or elements. If not, then there is only\n    // an icon.\n    for (const node of this.assignedDefaultNodes) {\n      const hasTextContent =\n        node.nodeType === Node.TEXT_NODE &&\n        !!(node as Text).wholeText.match(/\\S/);\n      if (node.nodeType === Node.ELEMENT_NODE || hasTextContent) {\n        return;\n      }\n    }\n\n    this.iconOnly = true;\n  }\n\n  private handleIconSlotChange() {\n    this.hasIcon = this.assignedIcons.length > 0;\n  }\n}\n\nfunction shouldReduceMotion() {\n  return window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n}\n", "/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport '../../divider/divider.js';\n\nimport {html, isServer, LitElement} from 'lit';\nimport {property, query, queryAssignedElements} from 'lit/decorators.js';\n\nimport {ANIMATE_INDICATOR, Tab} from './tab.js';\n\n/**\n * @fires change {Event} Fired when the selected tab changes. The target's\n * `activeTabIndex` or `activeTab` provide information about the selection\n * change. The change event is fired when a user interaction like a space/enter\n * key or click cause a selection change. The tab selection based on these\n * actions can be cancelled by calling preventDefault on the triggering\n * `keydown` or `click` event. --bubbles\n *\n * @example\n * // perform an action if a tab is clicked\n * tabs.addEventListener('change', (event: Event) => {\n *   if (event.target.activeTabIndex === 2)\n *     takeAction();\n *   }\n * });\n *\n * // prevent a click from triggering tab selection under some condition\n * tabs.addEventListener('click', (event: Event) => {\n *   if (notReady)\n *     event.preventDefault();\n *   }\n * });\n *\n */\nexport class Tabs extends LitElement {\n  /**\n   * The tabs of this tab bar.\n   */\n  @queryAssignedElements({flatten: true, selector: '[md-tab]'})\n  readonly tabs!: Tab[];\n\n  /**\n   * The currently selected tab, `null` only when there are no tab children.\n   *\n   * @export\n   */\n  get activeTab() {\n    return this.tabs.find((tab) => tab.active) ?? null;\n  }\n  set activeTab(tab: Tab | null) {\n    // Ignore setting activeTab to null. As long as there are children, one tab\n    // must be selected.\n    if (tab) {\n      this.activateTab(tab);\n    }\n  }\n\n  /**\n   * The index of the currently selected tab.\n   *\n   * @export\n   */\n  @property({type: Number, attribute: 'active-tab-index'})\n  get activeTabIndex() {\n    return this.tabs.findIndex((tab) => tab.active);\n  }\n  set activeTabIndex(index: number) {\n    const activateTabAtIndex = () => {\n      const tab = this.tabs[index];\n      // Ignore out-of-bound indices.\n      if (tab) {\n        this.activateTab(tab);\n      }\n    };\n\n    if (!this.slotElement) {\n      // This is needed to support setting the activeTabIndex via a lit property\n      // binding.\n      //\n      // ```ts\n      // html`\n      //   <md-tabs .activeTabIndex=${1}>\n      //     <md-tab>First</md-tab>\n      //     <md-tab>Second</md-tab>\n      //   </md-tabs>\n      // `;\n      // ```\n      //\n      // It's needed since lit's rendering lifecycle is asynchronous, and the\n      // `<slot>` element hasn't rendered, so `tabs` is empty.\n      this.updateComplete.then(activateTabAtIndex);\n      return;\n    }\n\n    activateTabAtIndex();\n  }\n\n  /**\n   * Whether or not to automatically select a tab when it is focused.\n   */\n  @property({type: Boolean, attribute: 'auto-activate'}) autoActivate = false;\n\n  @query('.tabs') private readonly tabsScrollerElement!: HTMLElement | null;\n  @query('slot') private readonly slotElement!: HTMLSlotElement | null;\n\n  private get focusedTab() {\n    return this.tabs.find((tab) => tab.matches(':focus-within'));\n  }\n\n  private readonly internals =\n    // Cast needed for closure\n    (this as HTMLElement).attachInternals();\n\n  constructor() {\n    super();\n    if (!isServer) {\n      this.internals.role = 'tablist';\n      this.addEventListener('keydown', this.handleKeydown.bind(this));\n      this.addEventListener('keyup', this.handleKeyup.bind(this));\n      this.addEventListener('focusout', this.handleFocusout.bind(this));\n    }\n  }\n\n  /**\n   * Scrolls the toolbar, if overflowing, to the active tab, or the provided\n   * tab.\n   *\n   * @param tabToScrollTo The tab that should be scrolled to. Defaults to the\n   *     active tab.\n   * @return A Promise that resolves after the tab has been scrolled to.\n   */\n  async scrollToTab(tabToScrollTo?: Tab | null) {\n    await this.updateComplete;\n    const {tabs} = this;\n    tabToScrollTo ??= this.activeTab;\n    if (\n      !tabToScrollTo ||\n      !tabs.includes(tabToScrollTo) ||\n      !this.tabsScrollerElement\n    ) {\n      return;\n    }\n\n    // wait for tabs to render.\n    for (const tab of this.tabs) {\n      await tab.updateComplete;\n    }\n\n    const offset = tabToScrollTo.offsetLeft;\n    const extent = tabToScrollTo.offsetWidth;\n    const scroll = this.scrollLeft;\n    const hostExtent = this.offsetWidth;\n    const scrollMargin = 48;\n    const min = offset - scrollMargin;\n    const max = offset + extent - hostExtent + scrollMargin;\n    const to = Math.min(min, Math.max(max, scroll));\n    // When a tab is focused, use 'auto' to use the CSS `scroll-behavior`. The\n    // default behavior is smooth scrolling. However, when there is not a tab\n    // focused on initialization, use 'instant' to immediately bring the focused\n    // tab into view.\n    const behavior: ScrollBehavior = !this.focusedTab ? 'instant' : 'auto';\n    this.tabsScrollerElement.scrollTo({behavior, top: 0, left: to});\n  }\n\n  protected override render() {\n    return html`\n      <div class=\"tabs\">\n        <slot\n          @slotchange=${this.handleSlotChange}\n          @click=${this.handleTabClick}></slot>\n      </div>\n      <md-divider part=\"divider\"></md-divider>\n    `;\n  }\n\n  private async handleTabClick(event: Event) {\n    const tab = event.target;\n    // Allow event to bubble\n    await 0;\n    if (event.defaultPrevented || !isTab(tab) || tab.active) {\n      return;\n    }\n\n    this.activateTab(tab);\n  }\n\n  private activateTab(activeTab: Tab) {\n    const {tabs} = this;\n    const previousTab = this.activeTab;\n    if (!tabs.includes(activeTab) || previousTab === activeTab) {\n      // Ignore setting activeTab to a tab element that is not a child.\n      return;\n    }\n\n    for (const tab of tabs) {\n      tab.active = tab === activeTab;\n    }\n\n    if (previousTab) {\n      // Don't dispatch a change event if activating a tab when no previous tabs\n      // were selected, such as when md-tabs auto-selects the first tab.\n      const defaultPrevented = !this.dispatchEvent(\n        new Event('change', {bubbles: true, cancelable: true}),\n      );\n      if (defaultPrevented) {\n        for (const tab of tabs) {\n          tab.active = tab === previousTab;\n        }\n        return;\n      }\n\n      activeTab[ANIMATE_INDICATOR](previousTab);\n    }\n\n    this.updateFocusableTab(activeTab);\n    this.scrollToTab(activeTab);\n  }\n\n  private updateFocusableTab(focusableTab: Tab) {\n    for (const tab of this.tabs) {\n      tab.tabIndex = tab === focusableTab ? 0 : -1;\n    }\n  }\n\n  // focus item on keydown and optionally select it\n  private async handleKeydown(event: KeyboardEvent) {\n    // Allow event to bubble.\n    await 0;\n    const isLeft = event.key === 'ArrowLeft';\n    const isRight = event.key === 'ArrowRight';\n    const isHome = event.key === 'Home';\n    const isEnd = event.key === 'End';\n    // Ignore non-navigation keys\n    if (event.defaultPrevented || (!isLeft && !isRight && !isHome && !isEnd)) {\n      return;\n    }\n\n    const {tabs} = this;\n    // Don't try to select another tab if there aren't any.\n    if (tabs.length < 2) {\n      return;\n    }\n\n    // Prevent default interactions, such as scrolling.\n    event.preventDefault();\n\n    let indexToFocus: number;\n    if (isHome || isEnd) {\n      indexToFocus = isHome ? 0 : tabs.length - 1;\n    } else {\n      // Check if moving forwards or backwards\n      const isRtl = getComputedStyle(this).direction === 'rtl';\n      const forwards = isRtl ? isLeft : isRight;\n      const {focusedTab} = this;\n      if (!focusedTab) {\n        // If there is not already a tab focused, select the first or last tab\n        // based on the direction we're traveling.\n        indexToFocus = forwards ? 0 : tabs.length - 1;\n      } else {\n        const focusedIndex = this.tabs.indexOf(focusedTab);\n        indexToFocus = forwards ? focusedIndex + 1 : focusedIndex - 1;\n        if (indexToFocus >= tabs.length) {\n          // Return to start if moving past the last item.\n          indexToFocus = 0;\n        } else if (indexToFocus < 0) {\n          // Go to end if moving before the first item.\n          indexToFocus = tabs.length - 1;\n        }\n      }\n    }\n\n    const tabToFocus = tabs[indexToFocus];\n    tabToFocus.focus();\n    if (this.autoActivate) {\n      this.activateTab(tabToFocus);\n    } else {\n      this.updateFocusableTab(tabToFocus);\n    }\n  }\n\n  // scroll to item on keyup.\n  private handleKeyup() {\n    this.scrollToTab(this.focusedTab ?? this.activeTab);\n  }\n\n  private handleFocusout() {\n    // restore focus to selected item when blurring the tab bar.\n    if (this.matches(':focus-within')) {\n      return;\n    }\n\n    const {activeTab} = this;\n    if (activeTab) {\n      this.updateFocusableTab(activeTab);\n    }\n  }\n\n  private handleSlotChange() {\n    const firstTab = this.tabs[0];\n    if (!this.activeTab && firstTab) {\n      // If the active tab was removed, auto-select the first one. There should\n      // always be a selected tab while the bar has children.\n      this.activateTab(firstTab);\n    }\n\n    // When children shift, ensure the active tab is visible. For example, if\n    // many children are added before the active tab, it'd be pushed off screen.\n    // This ensures it stays visible.\n    this.scrollToTab(this.activeTab);\n  }\n}\n\nfunction isTab(element: unknown): element is Tab {\n  return element instanceof HTMLElement && element.hasAttribute('md-tab');\n}\n", "/**\n * @license\n * Copyright 2024 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n// Generated stylesheet for ./tabs/internal/tabs-styles.css.\nimport {css} from 'lit';\nexport const styles = css`:host{box-sizing:border-box;display:flex;flex-direction:column;overflow:auto;scroll-behavior:smooth;scrollbar-width:none;position:relative}:host([hidden]){display:none}:host::-webkit-scrollbar{display:none}.tabs{align-items:end;display:flex;height:100%;overflow:inherit;scroll-behavior:inherit;scrollbar-width:inherit;justify-content:space-between;width:100%}::slotted(*){flex:1}::slotted([active]){z-index:1}\n`;\n", "/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {CSSResultOrNative} from 'lit';\nimport {customElement} from 'lit/decorators.js';\n\nimport {Tabs} from './internal/tabs.js';\nimport {styles} from './internal/tabs-styles.js';\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'md-tabs': MdTabs;\n  }\n}\n\n// TODO(b/267336507): add docs\n/**\n * @summary Tabs displays a list of selectable tabs.\n *\n * @final\n * @suppress {visibility}\n */\n@customElement('md-tabs')\nexport class MdTabs extends Tabs {\n  static override styles: CSSResultOrNative[] = [styles];\n}\n"],
  "mappings": "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",
  "names": ["MdDivider", "_a", "_a", "styles", "MdTabs", "styles"]
}
